import 'package:flutter/material.dart';


void main() {
  runApp(const MyApp());
}

/// [Widget] building the [MaterialApp].
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: MouseRegion(
            child: TweenAnimationBuilder<double>(
              tween: Tween(begin: 0.0, end: 1.0),
              duration: const Duration(milliseconds: 400),
              curve: Curves.easeInOut,
              builder: (context, value, child) {
                return Transform.translate(
                  offset: Offset(0, -20 * value),
                  child: Dock(
                    items: const [
                      Icons.person,
                      Icons.message,
                      Icons.call,
                      Icons.camera, 
                      Icons.photo,
                    ],
                    builder: (e) {
                      return Container(
                        constraints: const BoxConstraints(minWidth: 48),
                        height: 48,
                        margin: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: Colors.primaries[e.hashCode % Colors.primaries.length],
                        ),
                        child: Center(child: Icon(e, color: Colors.white)),
                      );
                    },
                  ),
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}

class Dock<T> extends StatefulWidget {
  const Dock({
    super.key,
    this.items = const [],
    required this.builder,
  });

  final List<T> items;
  final Widget Function(T) builder;

  @override
  State<Dock<T>> createState() => _DockState<T>();
}

class _DockState<T> extends State<Dock<T>> with SingleTickerProviderStateMixin {
  late final List<T> _items = widget.items.toList();
  late AnimationController _controller;
  int? _dragIndex;
  double? _dragOffset;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _onDragStart(int index, DragStartDetails details) {
    setState(() {
      _dragIndex = index;
      _dragOffset = details.localPosition.dx;
    });
  }

  void _onDragUpdate(DragUpdateDetails details) {
    if (_dragIndex == null) return;

    final RenderBox box = context.findRenderObject() as RenderBox;
    final double dx = details.globalPosition.dx - box.localToGlobal(Offset.zero).dx;
    final int newIndex = (dx ~/ 64).clamp(0, _items.length - 1);

    if (newIndex != _dragIndex) {
      setState(() {
        final item = _items.removeAt(_dragIndex!);
        _items.insert(newIndex, item);
        _dragIndex = newIndex;
      });
      _controller.forward(from: 0.0);
    }
  }

  void _onDragEnd(DragEndDetails details) {
    setState(() {
      _dragIndex = null;
      _dragOffset = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.black.withOpacity(0.2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            spreadRadius: 2,
          )
        ],
      ),
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: List.generate(_items.length, (index) {
          final item = _items[index];
          return GestureDetector(
            onPanStart: (details) => _onDragStart(index, details),
            onPanUpdate: _onDragUpdate,
            onPanEnd: _onDragEnd,
            child: AnimatedScale(
              scale: _dragIndex == index ? 1.2 : 1.0,
              duration: const Duration(milliseconds: 400), 
              curve: Curves.easeOutBack, 
              child: AnimatedSlide(
                offset: Offset(0, _dragIndex == index ? -0.2 : 0),
                duration: const Duration(milliseconds: 400),
                curve: Curves.easeInOut, 
                child: widget.builder(item),
              ),
            ),
          );
        }),
      ),
    );
  }
}
